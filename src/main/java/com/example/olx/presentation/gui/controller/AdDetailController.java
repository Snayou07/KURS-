package com.example.olx.presentation.gui.controller;

import com.example.olx.domain.decorator.AdComponent;
import com.example.olx.domain.decorator.AdDecoratorFactory;
import com.example.olx.domain.model.Ad;
import com.example.olx.domain.model.CategoryComponent;
import com.example.olx.domain.model.User;
import com.example.olx.domain.model.UserType;
import com.example.olx.presentation.gui.MainGuiApp;
import com.example.olx.presentation.gui.util.GlobalContext;
import javafx.application.Platform;
import javafx.fxml.FXML;
import javafx.geometry.Insets;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

public class AdDetailController {

    // --- FXML –ü–æ–ª—è ---
    @FXML private Label titleLabel;
    @FXML private ImageView adImageView;
    @FXML private Label noImageLabel;
    @FXML private Label priceLabel;
    @FXML private Text descriptionText;
    @FXML private Label categoryLabel;
    @FXML private Label sellerLabel;
    @FXML private Label adIdLabel;
    @FXML private Button backButton;
    @FXML private HBox actionButtonsBox;
    @FXML private Button editButton;
    @FXML private Button deleteButton;
    @FXML private VBox mainContainer;

    // --- –ü–æ–ª—è –∫–ª–∞—Å—É ---
    private VBox decoratedInfoContainer; // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –≤—ñ–¥ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ñ–≤
    private VBox decoratedInfoTextContainer; // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç—É
    private Ad currentAd;                // –ü–æ—Ç–æ—á–Ω–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è (–æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ –º–æ–¥–µ–ª—å)
    private AdComponent decoratedAd;     // –î–µ–∫–æ—Ä–æ–≤–∞–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è

    /**
     * –ú–µ—Ç–æ–¥, —â–æ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è JavaFX –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è FXML.
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –¥–µ—è–∫—ñ UI –µ–ª–µ–º–µ–Ω—Ç–∏.
     */
    public void initialize() {
        // –ü–æ—á–∞—Ç–∫–æ–≤–æ —Ö–æ–≤–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        if (editButton != null) {
            editButton.setVisible(false);
            editButton.setManaged(false); // –ù–µ –∑–∞–π–º–∞—î –º—ñ—Å—Ü–µ –≤ –ª–µ–π–∞—É—Ç—ñ
        }
        if (deleteButton != null) {
            deleteButton.setVisible(false);
            deleteButton.setManaged(false); // –ù–µ –∑–∞–π–º–∞—î –º—ñ—Å—Ü–µ –≤ –ª–µ–π–∞—É—Ç—ñ
        }
        // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–µ–∫–æ—Ä–æ–≤–∞–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
        setupDecoratedInfoContainer();
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞ –¥–∞–Ω–∏–º–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.
     * –¶–µ–π –º–µ—Ç–æ–¥ –æ—Ç—Ä–∏–º—É—î –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, –≤–∏—Ç—è–≥—É—î –∑ –Ω—å–æ–≥–æ –¥–∞–Ω—ñ —Ç–∞ –º–µ—Ç–∞–¥–∞–Ω—ñ –∑ –º–∞–ø–∏,
     * –∞ –ø–æ—Ç—ñ–º –æ–Ω–æ–≤–ª—é—î UI.
     *
     * @param ad –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è.
     */
    public void initData(Ad ad) {
        if (ad == null) {
            showErrorAndGoBack("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–µ—Ç–∞–ª—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è. –û–±'—î–∫—Ç –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ–π.");
            return;
        }
        this.currentAd = ad;

        // 1. –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ—Å—Ç–æ —ñ —á–∏—Å—Ç–æ, –±–µ–∑ —Ä—É—á–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥—É —Ä—è–¥–∫—ñ–≤
        String cleanDescription = ad.getDescription() != null ? ad.getDescription() : "";
        Map<String, String> metadata = ad.getDecorators();
        if (metadata == null) { // –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ null, —è–∫—â–æ –¥–∞–Ω—ñ –ø—Ä–∏–π—à–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ
            metadata = new HashMap<>();
        }

        // 2. –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –º–∞–ø–∏. –¶–µ –Ω–∞–±–∞–≥–∞—Ç–æ –Ω–∞–¥—ñ–π–Ω—ñ—à–µ!
        boolean isPremium = "true".equalsIgnoreCase(metadata.get("premium"));
        boolean isUrgent = "true".equalsIgnoreCase(metadata.get("urgent"));
        Double discountPercentage = parseDouble(metadata.get("discountPercentage"));
        String discountReason = metadata.get("discountReason");
        Integer warrantyMonths = parseInt(metadata.get("warrantyMonths"));
        String warrantyType = metadata.get("warrantyType");
        boolean freeDelivery = "true".equalsIgnoreCase(metadata.get("freeDelivery"));
        Double deliveryCost = parseDouble(metadata.get("deliveryCost"));
        String deliveryInfo = metadata.get("deliveryInfo");

        // 3. –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤–Ω—ñ—Å—Ç—é –¥–µ–∫–æ—Ä–æ–≤–∞–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
        this.decoratedAd = AdDecoratorFactory.createFullyDecoratedAd(
                ad, isPremium, isUrgent, discountPercentage, discountReason,
                warrantyMonths, warrantyType, freeDelivery, deliveryCost, deliveryInfo
        );

        // 4. –ó–∞–ø–æ–≤–Ω—é—î–º–æ –¥–µ—Ç–∞–ª—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤ UI
        populateAdDetailsUI(cleanDescription);
        setupActionButtons();
        loadAdImages();
        Platform.runLater(this::displayDecoratedAdInfo);
    }

    /**
     * –ó–∞–ø–æ–≤–Ω—é—î UI –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–µ—Ç–∞–ª—è–º–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.
     * @param displayDescription "–ß–∏—Å—Ç–∏–π" –æ–ø–∏—Å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è.
     */
    private void populateAdDetailsUI(String displayDescription) {
        if (decoratedAd == null) {
            showErrorAndGoBack("–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–µ–∫–æ—Ä–æ–≤–∞–Ω–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.");
            return;
        }

        titleLabel.setText(decoratedAd.getFormattedTitle());
        descriptionText.setText(displayDescription);
        priceLabel.setText(String.format("%.2f –≥—Ä–Ω", decoratedAd.getCalculatedPrice()));

        if (Math.abs(decoratedAd.getCalculatedPrice() - currentAd.getPrice()) > 0.01) {
            priceLabel.setStyle("-fx-text-fill: #28a745; -fx-font-weight: bold;");
        } else {
            priceLabel.setStyle("");
        }

        adIdLabel.setText("ID: " + currentAd.getAdId());

        try {
            User seller = MainGuiApp.userService.getUserById(currentAd.getSellerId());
            sellerLabel.setText("–ü—Ä–æ–¥–∞–≤–µ—Ü—å: " + (seller != null ? seller.getUsername() : "–ù–µ–≤—ñ–¥–æ–º–∏–π"));
        } catch (Exception e) {
            System.err.println("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–¥–∞–≤—Ü—è: " + e.getMessage());
            sellerLabel.setText("–ü—Ä–æ–¥–∞–≤–µ—Ü—å: –ù–µ–≤—ñ–¥–æ–º–∏–π");
        }

        try {
            Optional<CategoryComponent> categoryOptional = MainGuiApp.categoryService.findCategoryById(currentAd.getCategoryId());
            categoryLabel.setText("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: " + categoryOptional.map(CategoryComponent::getName).orElse("–ù–µ–≤—ñ–¥–æ–º–∞"));
        } catch (Exception e) {
            System.err.println("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: " + e.getMessage());
            categoryLabel.setText("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: –ù–µ–≤—ñ–¥–æ–º–∞");
        }
    }

    /**
     * –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤—ñ–¥ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ñ–≤ (—è–∫—â–æ –≤–æ–Ω–∞ —î).
     */
    /**
     * –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤—ñ–¥ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ñ–≤ —É –∑—Ä—É—á–Ω–æ–º—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ñ–æ—Ä–º–∞—Ç—ñ.
     */
    private void displayDecoratedAdInfo() {
        if (decoratedAd == null) return;

        // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        decoratedInfoTextContainer.getChildren().clear();

        // –û—Ç—Ä–∏–º—É—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ñ–≤
        Map<String, String> metadata = currentAd.getDecorators();
        if (metadata == null || metadata.isEmpty()) {
            decoratedInfoContainer.setVisible(false);
            decoratedInfoContainer.setManaged(false);
            return;
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ –∑—Ä—É—á–Ω—ñ –º—ñ—Ç–∫–∏ –∑–∞–º—ñ—Å—Ç—å —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
        createUserFriendlyDecorators(metadata);

        // –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —è–∫—â–æ —î —Ö–æ—á–∞ –± –æ–¥–∏–Ω –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
        if (!decoratedInfoTextContainer.getChildren().isEmpty()) {
            // –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, —è–∫—â–æ –π–æ–≥–æ —Ç–∞–º –Ω–µ–º–∞—î
            if (!mainContainer.getChildren().contains(decoratedInfoContainer)) {
                int index = mainContainer.getChildren().indexOf(actionButtonsBox);
                if (index != -1) {
                    mainContainer.getChildren().add(index, decoratedInfoContainer);
                } else {
                    mainContainer.getChildren().add(decoratedInfoContainer);
                }
            }
            decoratedInfoContainer.setVisible(true);
            decoratedInfoContainer.setManaged(true);
        } else {
            decoratedInfoContainer.setVisible(false);
            decoratedInfoContainer.setManaged(false);
        }
    }

    /**
     * –°—Ç–≤–æ—Ä—é—î –∑—Ä—É—á–Ω—ñ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –º—ñ—Ç–∫–∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö.
     */
    private void createUserFriendlyDecorators(Map<String, String> metadata) {
        // –ü—Ä–µ–º—ñ—É–º —Ç–æ–≤–∞—Ä
        if ("true".equalsIgnoreCase(metadata.get("premium"))) {
            Label premiumLabel = createDecoratorLabel("‚≠ê –ü—Ä–µ–º—ñ—É–º —Ç–æ–≤–∞—Ä", "#f39c12", true);
            decoratedInfoTextContainer.getChildren().add(premiumLabel);
        }

        // –¢–µ—Ä–º—ñ–Ω–æ–≤–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è
        if ("true".equalsIgnoreCase(metadata.get("urgent"))) {
            Label urgentLabel = createDecoratorLabel("üî• –¢–µ—Ä–º—ñ–Ω–æ–≤–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è", "#e74c3c", true);
            urgentLabel.setStyle(urgentLabel.getStyle() + " -fx-effect: dropshadow(gaussian, rgba(231, 76, 60, 0.3), 5, 0, 0, 0);");
            decoratedInfoTextContainer.getChildren().add(urgentLabel);
        }

        // –ó–Ω–∏–∂–∫–∞
        Double discountPercentage = parseDouble(metadata.get("discountPercentage"));
        if (discountPercentage != null && discountPercentage > 0) {
            String discountText = String.format("üí∞ –ó–Ω–∏–∂–∫–∞ %.0f%%", discountPercentage);
            Label discountLabel = createDecoratorLabel(discountText, "#e74c3c", true);
            decoratedInfoTextContainer.getChildren().add(discountLabel);

            // –ü—Ä–∏—á–∏–Ω–∞ –∑–Ω–∏–∂–∫–∏
            String discountReason = metadata.get("discountReason");
            if (discountReason != null && !discountReason.trim().isEmpty()) {
                Label reasonLabel = createDecoratorLabel("üí° " + discountReason, "#7f8c8d", false);
                decoratedInfoTextContainer.getChildren().add(reasonLabel);
            }

            // –ü–æ–∫–∞–∑—É—î–º–æ –µ–∫–æ–Ω–æ–º—ñ—é
            double originalPrice = currentAd.getPrice();
            double discountAmount = originalPrice * discountPercentage / 100;
            Label savingsLabel = createDecoratorLabel(
                    String.format("üí∏ –í–∏ –µ–∫–æ–Ω–æ–º–∏—Ç–µ: %.2f –≥—Ä–Ω", discountAmount),
                    "#27ae60",
                    true
            );
            decoratedInfoTextContainer.getChildren().add(savingsLabel);
        }

        // –ì–∞—Ä–∞–Ω—Ç—ñ—è
        Integer warrantyMonths = parseInt(metadata.get("warrantyMonths"));
        String warrantyType = metadata.get("warrantyType");
        if (warrantyMonths != null && warrantyMonths > 0) {
            String warrantyText = String.format("üõ°Ô∏è –ì–∞—Ä–∞–Ω—Ç—ñ—è: %d –º—ñ—Å.", warrantyMonths);
            if (warrantyType != null && !warrantyType.trim().isEmpty()) {
                warrantyText += " (" + warrantyType + ")";
            }
            Label warrantyLabel = createDecoratorLabel(warrantyText, "#27ae60", false);
            decoratedInfoTextContainer.getChildren().add(warrantyLabel);
        }

        // –î–æ—Å—Ç–∞–≤–∫–∞
        boolean freeDelivery = "true".equalsIgnoreCase(metadata.get("freeDelivery"));
        Double deliveryCost = parseDouble(metadata.get("deliveryCost"));
        String deliveryInfo = metadata.get("deliveryInfo");

        if (freeDelivery) {
            Label deliveryLabel = createDecoratorLabel("üöö –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞", "#3498db", true);
            decoratedInfoTextContainer.getChildren().add(deliveryLabel);
        } else if (deliveryCost != null && deliveryCost > 0) {
            String deliveryText = String.format("üöö –î–æ—Å—Ç–∞–≤–∫–∞: %.2f –≥—Ä–Ω", deliveryCost);
            Label deliveryLabel = createDecoratorLabel(deliveryText, "#3498db", false);
            decoratedInfoTextContainer.getChildren().add(deliveryLabel);
        }

        if (deliveryInfo != null && !deliveryInfo.trim().isEmpty()) {
            Label infoLabel = createDecoratorLabel("üìã " + deliveryInfo, "#7f8c8d", false);
            decoratedInfoTextContainer.getChildren().add(infoLabel);
        }
    }

    /**
     * –°—Ç–≤–æ—Ä—é—î —Å—Ç–∏–ª—ñ–∑–æ–≤–∞–Ω–∏–π Label –¥–ª—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞.
     */
    private Label createDecoratorLabel(String text, String color, boolean isBold) {
        Label label = new Label(text);
        label.setWrapText(true);
        label.setMaxWidth(550);

        String style = String.format("-fx-text-fill: %s; -fx-font-size: %dpx;",
                color, isBold ? 13 : 12);
        if (isBold) {
            style += " -fx-font-weight: bold;";
        }

        label.setStyle(style);
        label.setPadding(new Insets(3, 0, 3, 0));

        return label;
    }

    /**
     * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–µ–π–¥–∂—ñ–≤ –∑–∞–º—ñ—Å—Ç—å –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç—É.
     */
    private void createDecoratorBadges(Map<String, String> metadata) {
        HBox badgesContainer = new HBox(8);
        badgesContainer.setPadding(new Insets(0, 0, 10, 0));

        // –ü—Ä–µ–º—ñ—É–º –±–µ–π–¥–∂
        if ("true".equalsIgnoreCase(metadata.get("premium"))) {
            Label premiumBadge = createBadge("‚≠ê –ü—Ä–µ–º—ñ—É–º", "#f39c12");
            badgesContainer.getChildren().add(premiumBadge);
        }

        // –¢–µ—Ä–º—ñ–Ω–æ–≤–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è
        if ("true".equalsIgnoreCase(metadata.get("urgent"))) {
            Label urgentBadge = createBadge("üî• –¢–µ—Ä–º—ñ–Ω–æ–≤–æ", "#e74c3c");
            badgesContainer.getChildren().add(urgentBadge);
        }

        // –ó–Ω–∏–∂–∫–∞
        Double discountPercentage = parseDouble(metadata.get("discountPercentage"));
        if (discountPercentage != null && discountPercentage > 0) {
            Label discountBadge = createBadge(String.format("üí∞ -%.0f%%", discountPercentage), "#e74c3c");
            badgesContainer.getChildren().add(discountBadge);
        }

        // –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞
        if ("true".equalsIgnoreCase(metadata.get("freeDelivery"))) {
            Label deliveryBadge = createBadge("üöö –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞", "#3498db");
            badgesContainer.getChildren().add(deliveryBadge);
        }

        // –ì–∞—Ä–∞–Ω—Ç—ñ—è
        Integer warrantyMonths = parseInt(metadata.get("warrantyMonths"));
        if (warrantyMonths != null && warrantyMonths > 0) {
            Label warrantyBadge = createBadge(String.format("üõ°Ô∏è –ì–∞—Ä–∞–Ω—Ç—ñ—è %d –º—ñ—Å.", warrantyMonths), "#27ae60");
            badgesContainer.getChildren().add(warrantyBadge);
        }

        if (!badgesContainer.getChildren().isEmpty()) {
            decoratedInfoTextContainer.getChildren().add(badgesContainer);
        }
    }

    /**
     * –°—Ç–≤–æ—Ä—é—î —Å—Ç–∏–ª—ñ–∑–æ–≤–∞–Ω–∏–π –±–µ–π–¥–∂.
     */
    private Label createBadge(String text, String backgroundColor) {
        Label badge = new Label(text);
        badge.setStyle(String.format(
                "-fx-background-color: %s; " +
                        "-fx-text-fill: white; " +
                        "-fx-padding: 4 8 4 8; " +
                        "-fx-background-radius: 12; " +
                        "-fx-font-size: 11px; " +
                        "-fx-font-weight: bold;",
                backgroundColor
        ));
        return badge;
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–∏–π –º–µ—Ç–æ–¥ setupDecoratedInfoContainer –∑ –∫—Ä–∞—â–∏–º —Å—Ç–∏–ª–µ–º.
     */
    private void setupDecoratedInfoContainer() {
        decoratedInfoContainer = new VBox(10);
        decoratedInfoContainer.setPadding(new Insets(15));
        decoratedInfoContainer.setStyle(
                "-fx-background-color: linear-gradient(to bottom, #f8f9fa, #e9ecef); " +
                        "-fx-border-color: #dee2e6; " +
                        "-fx-border-width: 1; " +
                        "-fx-border-radius: 10; " +
                        "-fx-background-radius: 10; " +
                        "-fx-effect: dropshadow(gaussian, rgba(0,0,0,0.1), 8, 0, 0, 2);"
        );

        Label title = new Label("‚ú® –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —É–º–æ–≤–∏ —Ç–∞ –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ");
        title.setStyle(
                "-fx-font-weight: bold; " +
                        "-fx-font-size: 14px; " +
                        "-fx-text-fill: #2c3e50; " +
                        "-fx-padding: 0 0 5 0;"
        );

        // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–∫—Ä–µ–º–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        decoratedInfoTextContainer = new VBox(8);

        decoratedInfoContainer.getChildren().addAll(title, decoratedInfoTextContainer);
        decoratedInfoContainer.setVisible(false);
        decoratedInfoContainer.setManaged(false);
    }

    // --- –ù–æ–≤—ñ, –ø—Ä–æ—Å—Ç—ñ—à—ñ —Ö–µ–ª–ø–µ—Ä–∏ –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥—É –∑–Ω–∞—á–µ–Ω—å ---
    private Double parseDouble(String value) {
        if (value == null || value.isEmpty()) {
            return null;
        }
        try {
            return Double.parseDouble(value);
        } catch (NumberFormatException e) {
            System.err.println("–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É Double: " + value);
            return null;
        }
    }

    private Integer parseInt(String value) {
        if (value == null || value.isEmpty()) {
            return null;
        }
        try {
            return Integer.parseInt(value);
        } catch (NumberFormatException e) {
            System.err.println("–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É Integer: " + value);
            return null;
        }
    }

    // --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥—ñ–π ---
    @FXML
    private void handleBack() {
        try {
            MainGuiApp.loadMainScene();
        } catch (IOException e) {
            System.err.println("–ü–æ–º–∏–ª–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ü–µ–Ω—É: " + e.getMessage());
            e.printStackTrace();
            showError("–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É.");
        }
    }

    @FXML
    private void handleEditAd() {
        if (currentAd == null) {
            showError("–ü–æ–º–∏–ª–∫–∞", "–ù–µ–º–æ–∂–ª–∏–≤–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏, –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.");
            return;
        }
        try {
            MainGuiApp.loadEditAdScene(currentAd);
        } catch (IOException e) {
            System.err.println("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ü–µ–Ω–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: " + e.getMessage());
            e.printStackTrace();
            showError("–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.");
        }
    }

    @FXML
    private void handleDeleteAd() {
        if (currentAd == null) {
            showError("–ü–æ–º–∏–ª–∫–∞", "–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏, –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.");
            return;
        }
        User currentUser = GlobalContext.getInstance().getLoggedInUser();
        if (currentUser == null) {
            showError("–ü–æ–º–∏–ª–∫–∞", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π. –ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.");
            return;
        }

        Alert confirmationDialog = new Alert(Alert.AlertType.CONFIRMATION,
                "–í–∏ –¥—ñ–π—Å–Ω–æ –±–∞–∂–∞—î—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è \"" + currentAd.getTitle() + "\"?",
                ButtonType.YES, ButtonType.NO);
        confirmationDialog.setTitle("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è");
        confirmationDialog.setHeaderText(null);

        confirmationDialog.showAndWait().ifPresent(response -> {
            if (response == ButtonType.YES) {
                try {
                    MainGuiApp.adService.deleteAd(currentAd.getAdId(), currentUser.getUserId());
                    showInfoAlert("–£—Å–ø—ñ—Ö", "–û–≥–æ–ª–æ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.");
                    handleBack();
                } catch (Exception e) {
                    System.err.println("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: " + e.getMessage());
                    e.printStackTrace();
                    showError("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è", "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è. " + e.getMessage());
                }
            }
        });
    }

    /**
     * –ù–∞–ª–∞—à—Ç–æ–≤—É—î –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –≤—ñ–¥ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ñ–≤.
     */


    /**
     * –ù–∞–ª–∞—à—Ç–æ–≤—É—î –≤–∏–¥–∏–º—ñ—Å—Ç—å –∫–Ω–æ–ø–æ–∫ "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏" —Ç–∞ "–í–∏–¥–∞–ª–∏—Ç–∏"
     * –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø—Ä–∞–≤ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
     */
    private void setupActionButtons() {
        User currentUser = GlobalContext.getInstance().getLoggedInUser();
        if (currentUser != null && currentAd != null) {
            boolean isOwner = currentUser.getUserId().equals(currentAd.getSellerId());
            boolean isAdmin = currentUser.getUserType() == UserType.ADMIN;

            editButton.setVisible(isOwner);
            editButton.setManaged(isOwner);

            deleteButton.setVisible(isOwner || isAdmin);
            deleteButton.setManaged(isOwner || isAdmin);
        } else {
            editButton.setVisible(false);
            editButton.setManaged(false);
            deleteButton.setVisible(false);
            deleteButton.setManaged(false);
        }
    }

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.
     */
    private void loadAdImages() {
        if (currentAd == null || currentAd.getImagePaths() == null || currentAd.getImagePaths().isEmpty()) {
            noImageLabel.setVisible(true);
            adImageView.setImage(null);
            return;
        }

        noImageLabel.setVisible(false);
        String firstImagePath = currentAd.getImagePaths().get(0);
        loadImageToView(firstImagePath);
    }

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–º —à–ª—è—Ö–æ–º –¥–æ ImageView.
     * @param imagePath –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.
     */
    private void loadImageToView(String imagePath) {
        try {
            File imageFile = new File(imagePath);
            if (imageFile.exists() && imageFile.isFile()) {
                Image image = new Image(imageFile.toURI().toString());
                adImageView.setImage(image);
            } else {
                System.err.println("–§–∞–π–ª –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ —î —Ñ–∞–π–ª–æ–º: " + imagePath);
                adImageView.setImage(null);
                noImageLabel.setText("–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
                noImageLabel.setVisible(true);
            }
        } catch (Exception e) {
            System.err.println("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è '" + imagePath + "': " + e.getMessage());
            e.printStackTrace();
            adImageView.setImage(null);
            noImageLabel.setText("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è");
            noImageLabel.setVisible(true);
        }
    }

    // --- –£—Ç–∏–ª—ñ—Ç–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---
    private void showErrorAndGoBack(String message) {
        showError("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è", message);
        Platform.runLater(this::handleBack);
    }

    private void showInfoAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    private void showError(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}