// src/main/java/com/example/olx/presentation/gui/controller/AdDetailController.java
package com.example.olx.presentation.gui.controller;

import com.example.olx.domain.decorator.AdComponent;
import com.example.olx.domain.decorator.AdDecoratorFactory;
import com.example.olx.domain.exception.AdNotFoundException;
import com.example.olx.domain.exception.UnauthorizedActionException;
import com.example.olx.domain.model.Ad;
import com.example.olx.domain.model.CategoryComponent;
import com.example.olx.domain.model.User;
import com.example.olx.domain.model.UserType;
import com.example.olx.presentation.gui.MainGuiApp;
import com.example.olx.presentation.gui.util.GlobalContext;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;
import javafx.geometry.Insets;
import javafx.geometry.Pos;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Optional;

public class AdDetailController {

    @FXML private Label titleLabel;
    @FXML private ImageView adImageView;
    @FXML private Label noImageLabel;
    @FXML private Label priceLabel;
    @FXML private Text descriptionText;
    @FXML private Label categoryLabel;
    @FXML private Label sellerLabel;
    @FXML private Label adIdLabel;
    @FXML private Button backButton;
    @FXML private HBox actionButtonsBox;
    @FXML private Button editButton;
    @FXML private Button deleteButton;

    // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–ª—è –¥–µ–∫–æ—Ä–æ–≤–∞–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
    @FXML private VBox decoratedInfoContainer;
    private Text decoratedInfoText;

    // –ì–∞–ª–µ—Ä–µ—è –∑–æ–±—Ä–∞–∂–µ–Ω—å
    private VBox imageGalleryContainer;
    private HBox thumbnailContainer;
    private ImageView currentMainImage;
    private int currentImageIndex = 0;
    private List<String> imagePaths;

    private Ad currentAd;
    private AdComponent decoratedAd;

    public void initialize() {
        editButton.setVisible(true);
        deleteButton.setVisible(true);
        setupImageGallery();
        setupDecoratedInfoContainer();
    }

    private void setupDecoratedInfoContainer() {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–µ–∫–æ—Ä–æ–≤–∞–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
        decoratedInfoContainer = new VBox(10);
        decoratedInfoContainer.setAlignment(Pos.CENTER_LEFT);
        decoratedInfoContainer.setPadding(new Insets(15, 0, 15, 0));
        decoratedInfoContainer.setStyle("-fx-background-color: #f8f9fa; -fx-border-color: #dee2e6; -fx-border-radius: 8; -fx-background-radius: 8;");

        // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç –¥–ª—è –¥–µ–∫–æ—Ä–æ–≤–∞–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
        decoratedInfoText = new Text();
        decoratedInfoText.setStyle("-fx-font-size: 14px; -fx-fill: #495057;");
        decoratedInfoText.setWrappingWidth(700.0);

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –¥–µ–∫–æ—Ä–æ–≤–∞–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
        Label decoratedInfoLabel = new Label("üìã –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:");
        decoratedInfoLabel.setStyle("-fx-font-size: 16px; -fx-font-weight: bold; -fx-text-fill: #343a40;");

        decoratedInfoContainer.getChildren().addAll(decoratedInfoLabel, decoratedInfoText);
    }

    private void setupImageGallery() {
        imageGalleryContainer = new VBox(10);
        imageGalleryContainer.setAlignment(Pos.CENTER);

        currentMainImage = adImageView;
        currentMainImage.setFitHeight(300.0);
        currentMainImage.setFitWidth(400.0);
        currentMainImage.setPreserveRatio(true);
        currentMainImage.setSmooth(true);

        thumbnailContainer = new HBox(10);
        thumbnailContainer.setAlignment(Pos.CENTER);
        thumbnailContainer.setPadding(new Insets(10, 0, 10, 0));

        ScrollPane thumbnailScrollPane = new ScrollPane(thumbnailContainer);
        thumbnailScrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.AS_NEEDED);
        thumbnailScrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);
        thumbnailScrollPane.setFitToHeight(true);
        thumbnailScrollPane.setPrefHeight(100);
        thumbnailScrollPane.setStyle("-fx-background: transparent; -fx-background-color: transparent;");

        imageGalleryContainer.getChildren().add(thumbnailScrollPane);
    }

    public void initData(Ad ad) {
        initData(ad, false, false, null, null, null, null, null, null, null);
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º–∏
     */
    public void initData(Ad ad, boolean isPremium, boolean isUrgent,
                         Double discountPercentage, String discountReason,
                         Integer warrantyMonths, String warrantyType,
                         Boolean freeDelivery, Double deliveryCost, String deliveryInfo) {
        if (ad == null) {
            showErrorAndGoBack("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–µ—Ç–∞–ª—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è (–¥–∞–Ω—ñ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ).");
            return;
        }

        this.currentAd = ad;

        // –°—Ç–≤–æ—Ä—é—î–º–æ –¥–µ–∫–æ—Ä–æ–≤–∞–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        this.decoratedAd = AdDecoratorFactory.createFullyDecoratedAd(
                ad, isPremium, isUrgent, discountPercentage, discountReason,
                warrantyMonths, warrantyType, freeDelivery, deliveryCost, deliveryInfo
        );

        populateAdDetails();
        setupActionButtons();
        loadImages();
        displayDecoratedInfo();
    }

    /**
     * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ–∫–æ—Ä–æ–≤–∞–Ω–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
     */
    public void initDataWithAutoDecorators(Ad ad) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∑–Ω–∞—á–∞—î–º–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
        boolean isPremium = ad.getTitle().toLowerCase().contains("–ø—Ä–µ–º—ñ—É–º") ||
                ad.getDescription() != null && ad.getDescription().toLowerCase().contains("–ø—Ä–µ–º—ñ—É–º");

        boolean isUrgent = ad.getTitle().toLowerCase().contains("—Ç–µ—Ä–º—ñ–Ω–æ–≤–æ") ||
                ad.getDescription() != null && ad.getDescription().toLowerCase().contains("—Ç–µ—Ä–º—ñ–Ω–æ–≤–æ");

        Double discount = null;
        String discountReason = null;
        if (ad.getDescription() != null && ad.getDescription().toLowerCase().contains("–∑–Ω–∏–∂–∫–∞")) {
            discount = 10.0; // 10% –∑–Ω–∏–∂–∫–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            discountReason = "–°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è";
        }

        Integer warranty = null;
        String warrantyType = null;
        if (ad.getDescription() != null && ad.getDescription().toLowerCase().contains("–≥–∞—Ä–∞–Ω—Ç—ñ—è")) {
            warranty = 12; // 12 –º—ñ—Å—è—Ü—ñ–≤ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            warrantyType = "–û—Ñ—ñ—Ü—ñ–π–Ω–∞ –≥–∞—Ä–∞–Ω—Ç—ñ—è";
        }

        Boolean freeDelivery = null;
        Double deliveryCost = null;
        String deliveryInfo = null;
        if (ad.getDescription() != null &&
                (ad.getDescription().toLowerCase().contains("–¥–æ—Å—Ç–∞–≤–∫–∞") ||
                        ad.getDescription().toLowerCase().contains("–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞"))) {
            if (ad.getDescription().toLowerCase().contains("–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞")) {
                freeDelivery = true;
                deliveryInfo = "–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å—ñ–π –£–∫—Ä–∞—ó–Ω—ñ";
            } else {
                freeDelivery = false;
                deliveryCost = 50.0;
                deliveryInfo = "–î–æ—Å—Ç–∞–≤–∫–∞ –ù–æ–≤–æ—é –ü–æ—à—Ç–æ—é";
            }
        }

        initData(ad, isPremium, isUrgent, discount, discountReason,
                warranty, warrantyType, freeDelivery, deliveryCost, deliveryInfo);
    }

    private void populateAdDetails() {
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–µ–∫–æ—Ä–æ–≤–∞–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        titleLabel.setText(decoratedAd.getFormattedTitle());

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω—É —Ü—ñ–Ω—É –∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ñ–≤
        double calculatedPrice = decoratedAd.getCalculatedPrice();
        priceLabel.setText(String.format("%.2f –≥—Ä–Ω", calculatedPrice));

        // –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
        descriptionText.setText(currentAd.getDescription() != null ? currentAd.getDescription() : "–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π.");
        adIdLabel.setText(currentAd.getAdId());

        Optional<CategoryComponent> catOpt = MainGuiApp.categoryService.findCategoryById(currentAd.getCategoryId());
        categoryLabel.setText(catOpt.map(CategoryComponent::getName).orElse("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è"));

        try {
            User seller = MainGuiApp.userService.getUserById(currentAd.getSellerId());
            sellerLabel.setText(seller.getUsername());
        } catch (Exception e) {
            sellerLabel.setText("–ù–µ–≤—ñ–¥–æ–º–∏–π –ø—Ä–æ–¥–∞–≤–µ—Ü—å");
        }
    }

    private void displayDecoratedInfo() {
        // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –ø–æ–≤–Ω—É –¥–µ–∫–æ—Ä–æ–≤–∞–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        String decoratedInfo = decoratedAd.getDisplayInfo();
        decoratedInfoText.setText(decoratedInfo);

        // –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–∞–∫–µ—Ç—É
        addDecoratedInfoToMainContainer();
    }

    private void addDecoratedInfoToMainContainer() {
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π VBox —ñ –¥–æ–¥–∞—î–º–æ –¥–µ–∫–æ—Ä–æ–≤–∞–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—ñ—Å–ª—è –æ–ø–∏—Å—É
        if (descriptionText.getParent() instanceof VBox) {
            VBox parentContainer = (VBox) descriptionText.getParent().getParent();

            // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ–Ω–¥–µ–∫—Å –±–ª–æ–∫—É –∑ –æ–ø–∏—Å–æ–º
            int descriptionIndex = -1;
            for (int i = 0; i < parentContainer.getChildren().size(); i++) {
                if (parentContainer.getChildren().get(i) instanceof VBox) {
                    VBox vbox = (VBox) parentContainer.getChildren().get(i);
                    if (vbox.getChildren().contains(descriptionText.getParent())) {
                        descriptionIndex = i;
                        break;
                    }
                }
            }

            // –î–æ–¥–∞—î–º–æ –¥–µ–∫–æ—Ä–æ–≤–∞–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—ñ—Å–ª—è –æ–ø–∏—Å—É
            if (descriptionIndex >= 0) {
                parentContainer.getChildren().add(descriptionIndex + 1, decoratedInfoContainer);
            }
        }
    }

    // –ú–µ—Ç–æ–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω
    private void loadImages() {
        imagePaths = currentAd.getImagePaths();

        if (imagePaths == null || imagePaths.isEmpty()) {
            showNoImageMessage();
            return;
        }

        loadMainImage(0);
        loadThumbnails();

        if (imagePaths.size() > 1) {
            addGalleryToMainContainer();
        }
    }

    private void showNoImageMessage() {
        adImageView.setVisible(false);
        noImageLabel.setText("–§–æ—Ç–æ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ");
        noImageLabel.setVisible(true);
        thumbnailContainer.getChildren().clear();
    }

    private void loadMainImage(int index) {
        if (index < 0 || index >= imagePaths.size()) {
            return;
        }

        String imagePath = imagePaths.get(index);
        Image image = loadImageFromPath(imagePath);

        if (image != null) {
            currentMainImage.setImage(image);
            currentMainImage.setVisible(true);
            noImageLabel.setVisible(false);
            currentImageIndex = index;
        } else {
            if (index + 1 < imagePaths.size()) {
                loadMainImage(index + 1);
            } else {
                showNoImageMessage();
            }
        }
    }

    private void loadThumbnails() {
        thumbnailContainer.getChildren().clear();

        for (int i = 0; i < imagePaths.size(); i++) {
            String imagePath = imagePaths.get(i);
            Image thumbnailImage = loadImageFromPath(imagePath);

            if (thumbnailImage != null) {
                ImageView thumbnail = createThumbnail(thumbnailImage, i);
                thumbnailContainer.getChildren().add(thumbnail);
            }
        }
    }

    private ImageView createThumbnail(Image image, int index) {
        ImageView thumbnail = new ImageView(image);
        thumbnail.setFitHeight(80);
        thumbnail.setFitWidth(80);
        thumbnail.setPreserveRatio(true);
        thumbnail.setSmooth(true);

        updateThumbnailStyle(thumbnail, index == currentImageIndex);

        thumbnail.setOnMouseClicked(event -> {
            loadMainImage(index);
            updateAllThumbnailStyles();
        });

        thumbnail.setOnMouseEntered(event -> {
            if (index != currentImageIndex) {
                thumbnail.setStyle("-fx-effect: dropshadow(gaussian, rgba(0,0,0,0.4), 5, 0.5, 0, 0); -fx-cursor: hand;");
            }
        });

        thumbnail.setOnMouseExited(event -> {
            updateThumbnailStyle(thumbnail, index == currentImageIndex);
        });

        return thumbnail;
    }

    private void updateThumbnailStyle(ImageView thumbnail, boolean isSelected) {
        if (isSelected) {
            thumbnail.setStyle("-fx-effect: dropshadow(gaussian, rgba(0,100,255,0.8), 8, 0.6, 0, 0); -fx-cursor: default;");
        } else {
            thumbnail.setStyle("-fx-effect: dropshadow(gaussian, rgba(0,0,0,0.2), 3, 0.3, 0, 0); -fx-cursor: hand;");
        }
    }

    private void updateAllThumbnailStyles() {
        for (int i = 0; i < thumbnailContainer.getChildren().size(); i++) {
            if (thumbnailContainer.getChildren().get(i) instanceof ImageView) {
                ImageView thumbnail = (ImageView) thumbnailContainer.getChildren().get(i);
                updateThumbnailStyle(thumbnail, i == currentImageIndex);
            }
        }
    }

    private Image loadImageFromPath(String imagePath) {
        try {
            File imageFile = new File(imagePath);

            if (!imageFile.exists()) {
                imageFile = new File("user_images", new File(imagePath).getName());
            }

            if (imageFile.exists()) {
                return new Image(imageFile.toURI().toString());
            } else {
                System.err.println("Image file not found: " + imagePath);
                return null;
            }
        } catch (Exception e) {
            System.err.println("Error loading image: " + imagePath + " - " + e.getMessage());
            return null;
        }
    }

    private void addGalleryToMainContainer() {
        if (adImageView.getParent() instanceof VBox) {
            VBox parentContainer = (VBox) adImageView.getParent();
            int imageViewIndex = parentContainer.getChildren().indexOf(adImageView);

            if (imageViewIndex >= 0 && imageViewIndex + 1 < parentContainer.getChildren().size()) {
                parentContainer.getChildren().add(imageViewIndex + 1, imageGalleryContainer.getChildren().get(0));
            }
        }
    }

    private void setupActionButtons() {
        User loggedInUser = GlobalContext.getInstance().getLoggedInUser();
        if (loggedInUser != null && currentAd != null) {
            boolean isOwner = loggedInUser.getUserId().equals(currentAd.getSellerId());
            boolean isAdmin = loggedInUser.getUserType() == UserType.ADMIN;

            if (isOwner) {
                editButton.setVisible(true);
            }
            if (isOwner || isAdmin) {
                deleteButton.setVisible(true);
            }
        }
    }

    @FXML
    private void handleEditAd() {
        if (currentAd == null) return;
        try {
            MainGuiApp.loadEditAdScene(currentAd);
        } catch (IOException e) {
            e.printStackTrace();
            showErrorAlert("–ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è", "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: " + e.getMessage());
        }
    }

    @FXML
    private void handleDeleteAd() {
        if (currentAd == null) return;
        User loggedInUser = GlobalContext.getInstance().getLoggedInUser();
        if (loggedInUser == null) {
            showErrorAlert("–ü–æ–º–∏–ª–∫–∞", "–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.");
            return;
        }

        Alert confirmationDialog = new Alert(Alert.AlertType.CONFIRMATION);
        confirmationDialog.setTitle("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è");
        confirmationDialog.setHeaderText("–í–∏ –¥—ñ–π—Å–Ω–æ –±–∞–∂–∞—î—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è '" + currentAd.getTitle() + "'?");
        confirmationDialog.setContentText("–¶—é –¥—ñ—é –Ω–µ–º–æ–∂–ª–∏–≤–æ –±—É–¥–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏.");

        Optional<ButtonType> result = confirmationDialog.showAndWait();
        if (result.isPresent() && result.get() == ButtonType.OK) {
            try {
                MainGuiApp.adService.deleteAd(currentAd.getAdId(), loggedInUser.getUserId());
                showInfoAlert("–£—Å–ø—ñ—Ö", "–û–≥–æ–ª–æ—à–µ–Ω–Ω—è '" + currentAd.getTitle() + "' –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.");
                handleBack();
            } catch (AdNotFoundException e) {
                showErrorAlert("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è", "–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ú–æ–∂–ª–∏–≤–æ, –π–æ–≥–æ –≤–∂–µ –≤–∏–¥–∞–ª–∏–ª–∏.");
            } catch (UnauthorizedActionException e) {
                showErrorAlert("–ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É", "–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ü—å–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.");
            } catch (Exception e) {
                showErrorAlert("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è", "–°—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞: " + e.getMessage());
                e.printStackTrace();
            }
        }
    }

    @FXML
    private void handleBack() {
        try {
            MainGuiApp.loadMainScene();
        } catch (IOException e) {
            e.printStackTrace();
            showErrorAlert("–ü–æ–º–∏–ª–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó", "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É.");
        }
    }

    // Utility –º–µ—Ç–æ–¥–∏
    private void showErrorAndGoBack(String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle("–ü–æ–º–∏–ª–∫–∞");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
        handleBack();
    }

    private void showErrorAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    private void showInfoAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}