package com.example.olx.presentation.gui;

import com.example.olx.application.command.AdCommandManager;
import com.example.olx.application.command.CommandFactory;
import com.example.olx.application.command.CommandInvoker;
import com.example.olx.application.service.impl.AdServiceImpl;
import com.example.olx.application.service.impl.CategoryServiceImpl;
import com.example.olx.application.service.impl.UserServiceImpl;
import com.example.olx.application.service.port.AdServicePort;
import com.example.olx.application.service.port.CategoryServicePort;
import com.example.olx.application.service.port.NotificationServicePort;
import com.example.olx.application.service.port.UserService;
import com.example.olx.application.service.strategy.AdSearchStrategy;
import com.example.olx.application.service.strategy.DefaultAdSearchStrategy;
import com.example.olx.domain.model.Ad;
import com.example.olx.domain.model.AdState;
import com.example.olx.domain.model.Category;
import com.example.olx.domain.model.CategoryComponent;
import com.example.olx.domain.repository.AdRepository;
import com.example.olx.domain.repository.CategoryRepository;
import com.example.olx.domain.repository.UserRepository;
import com.example.olx.infrastructure.notification.ConsoleNotificationServiceImpl;
import com.example.olx.infrastructure.persistence.FileAdRepositoryImpl;
import com.example.olx.infrastructure.persistence.FileCategoryRepositoryImpl;
import com.example.olx.infrastructure.persistence.FileUserRepositoryImpl;
import com.example.olx.infrastructure.persistence.SessionManager;
import com.example.olx.infrastructure.security.DemoPasswordHasherImpl;
import com.example.olx.infrastructure.security.PasswordHasher;
import com.example.olx.presentation.gui.controller.AdDetailController;
import com.example.olx.presentation.gui.controller.CreateAdController;
import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;

import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

public class MainGuiApp extends Application {

    private static Stage primaryStage;
    // –°–µ—Ä–≤—ñ—Å–∏
    public static UserService userService;
    public static AdServicePort adService;
    public static CategoryServicePort categoryService;
    public static SessionManager sessionManager;

    // Command –ø–∞—Ç—Ç–µ—Ä–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
    public static AdCommandManager adCommandManager;
    public static CommandInvoker commandInvoker;
    public static CommandFactory commandFactory;


    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–µ—Ç–∞–ª—å–Ω–∏–π –≤–∏–≥–ª—è–¥ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ –±–∞–∑–æ–≤–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
     * –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ñ–≤.
     */
    public static void loadAdDetailScene(Ad ad) throws IOException {
        loadAdDetailSceneWithAutoDecorators(ad);
    }


    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–µ—Ç–∞–ª—å–Ω–∏–π –≤–∏–≥–ª—è–¥ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è. AdDetailController —Ç–µ–ø–µ—Ä —Å–∞–º
     * –æ–±—Ä–æ–±–ª—è—î –ª–æ–≥—ñ–∫—É –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ñ–≤, –ø–∞—Ä—Å—è—á–∏ –æ–ø–∏—Å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.
     */
    public static void loadAdDetailSceneWithAutoDecorators(Ad ad) throws IOException {
        URL fxmlLocation = MainGuiApp.class.getResource("/com/example/olx/presentation/gui/view/AdDetailView.fxml");
        if (fxmlLocation == null) {
            throw new IOException("Cannot find FXML file: AdDetailView.fxml. Path: /com/example/olx/presentation/gui/view/AdDetailView.fxml");
        }
        FXMLLoader fxmlLoader = new FXMLLoader(fxmlLocation);
        Parent root = fxmlLoader.load();
        AdDetailController controller = fxmlLoader.getController();

        if (controller == null) {
            throw new IOException("Controller for AdDetailView.fxml is null. Check fx:controller attribute in FXML.");
        }

        // AdDetailController —Ç–µ–ø–µ—Ä –º–∞—î —Ç—ñ–ª—å–∫–∏ initData(Ad ad).
        // –í–Ω—É—Ç—Ä—ñ—à–Ω—å–æ –≤—ñ–Ω —Ä–æ–∑–±–∏—Ä–∞—î –º–µ—Ç–∞–¥–∞–Ω—ñ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ñ–≤ –∑ –æ–ø–∏—Å—É Ad.
        // –¢–æ–º—É hasAutoDecoratorsMethod, —è–∫—â–æ –≤—ñ–Ω —à—É–∫–∞—î —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏–π –º–µ—Ç–æ–¥, –º–æ–∂–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ false.
        // –£ –±—É–¥—å-—è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É, –≤–∏–∫–ª–∏–∫–∞—î–º–æ —î–¥–∏–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–∏–π initData(Ad ad).
        controller.initData(ad);

        Scene scene = primaryStage.getScene();
        if (scene == null) {
            scene = new Scene(root, 800, 650); // –†–æ–∑–º—ñ—Ä–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            primaryStage.setScene(scene);
        } else {
            scene.setRoot(root);
        }
        primaryStage.setTitle("–î–µ—Ç–∞–ª—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: " + (ad != null ? ad.getTitle() : "–ù–µ–≤—ñ–¥–æ–º–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è"));
    }


    public static void loadScene(String fxmlFile) {
        String fullPath = null;
        try {
            fullPath = "/com/example/olx/presentation/gui/view/" + fxmlFile;
            FXMLLoader loader = new FXMLLoader(MainGuiApp.class.getResource(fullPath));

            Parent root = loader.load();
            primaryStage.setScene(new Scene(root));

        } catch (IOException e) {
            System.err.println("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ü–µ–Ω–∏: " + fxmlFile);
            e.printStackTrace();
        } catch (NullPointerException e) {
            System.err.println("‚ùå FXML —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —à–ª—è—Ö–æ–º: " + fullPath + ". –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å —à–ª—è—Ö—É —Ç–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—É –≤ —Ä–µ—Å—É—Ä—Å–∞—Ö.");
            e.printStackTrace();
        }
    }

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–µ—Ç–∞–ª—å–Ω–∏–π –≤–∏–≥–ª—è–¥ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.
     * AdDetailController —Ç–µ–ø–µ—Ä —Å–∞–º –æ–±—Ä–æ–±–ª—è—î –ª–æ–≥—ñ–∫—É –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ñ–≤, –ø–∞—Ä—Å—è—á–∏ –æ–ø–∏—Å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.
     * –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ isPremium, isUrgent –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —Ç—É—Ç –ª–∏—à–µ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤—ñ–∫–Ω–∞.
     * –Ü–Ω—à—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ñ–≤ (discountPercentage —Ç–æ—â–æ) –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É –¥–æ AdDetailController,
     * –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω –æ—á—ñ–∫—É—î —ó—Ö —É –º–µ—Ç–∞–¥–∞–Ω–∏—Ö –æ–ø–∏—Å—É —Å–∞–º–æ–≥–æ –æ–±'—î–∫—Ç–∞ Ad.
     */
    public static void loadAdDetailSceneWithDecorators(Ad ad, boolean isPremium, boolean isUrgent,
                                                       Double discountPercentage, String discountReason,
                                                       Integer warrantyMonths, String warrantyType,
                                                       Boolean freeDelivery, Double deliveryCost, String deliveryInfo) throws IOException {
        URL fxmlLocation = MainGuiApp.class.getResource("/com/example/olx/presentation/gui/view/AdDetailView.fxml");
        if (fxmlLocation == null) {
            throw new IOException("Cannot find FXML file: AdDetailView.fxml. Path: /com/example/olx/presentation/gui/view/AdDetailView.fxml");
        }
        FXMLLoader fxmlLoader = new FXMLLoader(fxmlLocation);
        Parent root = fxmlLoader.load();
        AdDetailController controller = fxmlLoader.getController();

        if (controller == null) {
            throw new IOException("Controller for AdDetailView.fxml is null. Check fx:controller attribute in FXML.");
        }

        // AdDetailController —Ç–µ–ø–µ—Ä –º–∞—î —Ç—ñ–ª—å–∫–∏ initData(Ad ad).
        // –í—ñ–Ω –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ —Ä–æ–∑–±–∏—Ä–∞—î –º–µ—Ç–∞–¥–∞–Ω—ñ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ñ–≤ –∑ –æ–ø–∏—Å—É Ad.
        // –¢–æ–º—É –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∫–æ–¥, —â–æ –ø–µ—Ä–µ–≤—ñ—Ä—è–≤ hasDecoratorsMethod —ñ –≤–∏–∫–ª–∏–∫–∞–≤ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π initData,
        // –±—ñ–ª—å—à–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω —É —Ç–∞–∫–æ–º—É –≤–∏–≥–ª—è–¥—ñ. –í–∏–∫–ª–∏–∫–∞—î–º–æ —î–¥–∏–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–∏–π initData(Ad ad).
        controller.initData(ad);
        // –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —â–æ–± —Ü—ñ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–ª–∏—Å—è, –æ–±'—î–∫—Ç 'ad'
        // –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º —á–∏–Ω–æ–º –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π –æ–ø–∏—Å –∑ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏.

        Scene scene = primaryStage.getScene();
        if (scene == null) {
            scene = new Scene(root, 800, 650);
            primaryStage.setScene(scene);
        } else {
            scene.setRoot(root);
        }

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–µ–∫–æ—Ä–æ–≤–∞–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤—ñ–∫–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤, –ø–µ—Ä–µ–¥–∞–Ω–∏—Ö —Å—é–¥–∏
        String windowTitle = "–î–µ—Ç–∞–ª—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: " + (ad != null ? ad.getTitle() : "–ù–µ–≤—ñ–¥–æ–º–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è");
        if (isPremium) windowTitle = "‚≠ê " + windowTitle;
        if (isUrgent) windowTitle = "üö® " + windowTitle;

        primaryStage.setTitle(windowTitle);
    }

    /**
     * –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è "–ø—Ä–µ–º—ñ—É–º" –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è.
     * –©–æ–± —Ü–µ –º–∞–ª–æ –µ—Ñ–µ–∫—Ç –≤ AdDetailController, –æ–±'—î–∫—Ç 'ad' –ø–æ–≤–∏–Ω–µ–Ω
     * –º–∞—Ç–∏ –≤ –æ–ø–∏—Å—ñ –º–µ—Ç–∞–¥–∞–Ω—ñ "premium:true", "warrantyMonths:12" —ñ —Ç.–¥.
     */
    public static void loadPremiumAdDetailScene(Ad ad) throws IOException {
        // –î–ª—è —Ç–æ–≥–æ, —â–æ–± AdDetailController –≤—ñ–¥–æ–±—Ä–∞–∑–∏–≤ —Ü—ñ –∞—Ç—Ä–∏–±—É—Ç–∏,
        // –≤–æ–Ω–∏ –º–∞—é—Ç—å –±—É—Ç–∏ —á–∞—Å—Ç–∏–Ω–æ—é ad.getDescription() —É —Ñ–æ—Ä–º–∞—Ç—ñ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö.
        // –ù–∞–ø—Ä–∏–∫–ª–∞–¥, ad.setDescription(ad.getDescription() + "\n\n---DECORATORS---\npremium:true;warrantyMonths:12;...");
        // –¶–µ–π –º–µ—Ç–æ–¥ –∑–∞—Ä–∞–∑ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É –≤–ø–ª–∏–≤–∞—î –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤—ñ–∫–Ω–∞.
        loadAdDetailSceneWithDecorators(ad, true, false, null, null,
                12, "–†–æ–∑—à–∏—Ä–µ–Ω–∞ –≥–∞—Ä–∞–Ω—Ç—ñ—è", true, 0.0, "–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –µ–∫—Å–ø—Ä–µ—Å-–¥–æ—Å—Ç–∞–≤–∫–∞");
    }

    /**
     * –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è "—Ç–µ—Ä–º—ñ–Ω–æ–≤–æ–≥–æ" –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ –∑–Ω–∏–∂–∫–æ—é.
     * –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–æ, 'ad' –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º–µ—Ç–∞–¥–∞–Ω—ñ –≤ –æ–ø–∏—Å—ñ.
     */
    public static void loadUrgentDiscountAdDetailScene(Ad ad, double discountPercent) throws IOException {
        loadAdDetailSceneWithDecorators(ad, false, true, discountPercent, "–¢–µ—Ä–º—ñ–Ω–æ–≤–∞ —Ä–æ–∑–ø—Ä–æ–¥–∞–∂",
                null, null, false, 30.0, "–®–≤–∏–¥–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∞");
    }


    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å—Ü–µ–Ω—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
     */
    public static void loadEditAdScene(Ad adToEdit) throws IOException {
        URL fxmlLocation = MainGuiApp.class.getResource("/com/example/olx/presentation/gui/view/CreateAdView.fxml");
        if (fxmlLocation == null) {
            throw new IOException("Cannot find FXML file: CreateAdView.fxml for editing. Path: /com/example/olx/presentation/gui/view/CreateAdView.fxml");
        }
        FXMLLoader fxmlLoader = new FXMLLoader(fxmlLocation);
        Parent root = fxmlLoader.load();
        CreateAdController controller = fxmlLoader.getController();

        if (controller == null) {
            throw new IOException("Controller for CreateAdView.fxml is null. Check fx:controller attribute in FXML.");
        }
        controller.initDataForEdit(adToEdit);

        Scene scene = primaryStage.getScene();
        if (scene == null) {
            scene = new Scene(root, 700, 600); // –†–æ–∑–º—ñ—Ä–∏ –¥–ª—è —Ñ–æ—Ä–º–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è/—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
            primaryStage.setScene(scene);
        } else {
            scene.setRoot(root);
        }
        primaryStage.setTitle("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: " + (adToEdit != null ? adToEdit.getTitle() : ""));
    }


    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –º–∞—î –º–µ—Ç–æ–¥ initDataWithAutoDecorators(Ad ad).
     * –¶–µ–π –º–µ—Ç–æ–¥ –º–æ–∂–µ –±—É—Ç–∏ –º–µ–Ω—à –∞–∫—Ç—É–∞–ª—å–Ω–∏–º, —è–∫—â–æ AdDetailController –º–∞—î –ª–∏—à–µ –æ–¥–∏–Ω initData(Ad ad).
     */
    private static boolean hasAutoDecoratorsMethod(AdDetailController controller) {
        if (controller == null) return false;
        try {
            // –Ø–∫—â–æ AdDetailController –º–∞—î –ª–∏—à–µ initData(Ad ad), –∞ –Ω–µ initDataWithAutoDecorators,
            // —Ü–µ–π –º–µ—Ç–æ–¥ –ø–æ–≤–µ—Ä–Ω–µ false.
            controller.getClass().getMethod("initDataWithAutoDecorators", Ad.class);
            return true;
        } catch (NoSuchMethodException e) {
            return false;
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –º–∞—î –º–µ—Ç–æ–¥ initData –∑ —É—Å—ñ–º–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ñ–≤.
     * –ó –æ–≥–ª—è–¥—É –Ω–∞ —Ç–µ, —â–æ AdDetailController –±—É–ª–æ –∑–º—ñ–Ω–µ–Ω–æ, —Ü–µ–π –º–µ—Ç–æ–¥, —à–≤–∏–¥—à–µ –∑–∞ –≤—Å–µ, –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏–º–µ false.
     */
    private static boolean hasDecoratorsMethod(AdDetailController controller) {
        if (controller == null) return false;
        try {
            // –¶—è —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ –±—ñ–ª—å—à–µ –Ω–µ —ñ—Å–Ω—É—î –≤ AdDetailController –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ Canvas.
            controller.getClass().getMethod("initData", Ad.class, boolean.class, boolean.class,
                    Double.class, String.class, Integer.class, String.class,
                    Boolean.class, Double.class, String.class);
            return true;
        } catch (NoSuchMethodException e) {
            return false;
        }
    }

    @Override
    public void init() throws Exception {
        super.init();
        System.out.println("Initializing backend services...");
        sessionManager = SessionManager.getInstance();
        sessionManager.setStorageFilePath("olx_gui_data.dat");
        sessionManager.loadState();
        System.out.println("Session state loaded successfully.");

        PasswordHasher passwordHasher = new DemoPasswordHasherImpl();
        UserRepository userRepository = new FileUserRepositoryImpl(sessionManager);
        CategoryRepository categoryRepository = new FileCategoryRepositoryImpl(sessionManager);
        AdRepository adRepository = new FileAdRepositoryImpl(sessionManager);

        NotificationServicePort notificationService = new ConsoleNotificationServiceImpl() {
            @Override
            public void notifyAdStateChanged(Ad ad, AdState newState) {
                // –ú–æ–∂–Ω–∞ —Ä–æ–∑–∫–æ–º–µ–Ω—Ç—É–≤–∞—Ç–∏ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É
                // System.out.println("Ad " + ad.getId() + " state changed to " + newState);
            }
        };
        AdSearchStrategy adSearchStrategy = new DefaultAdSearchStrategy();

        userService = new UserServiceImpl(userRepository, passwordHasher);
        categoryService = new CategoryServiceImpl(categoryRepository);
        adService = new AdServiceImpl(adRepository, userRepository, categoryRepository, notificationService, adSearchStrategy);

        commandInvoker = new CommandInvoker();
        commandFactory = new CommandFactory(adService);
        adCommandManager = new AdCommandManager(commandInvoker, commandFactory);

        initializeDefaultCategories();
        System.out.println("Backend services initialized successfully.");
    }

    @Override
    public void start(Stage stage) throws IOException {
        primaryStage = stage;
        primaryStage.setTitle("OLX-–¥–æ—à–∫–∞ –æ–≥–æ–ª–æ—à–µ–Ω—å");
        loadLoginScene(); // –ü–æ—á–∏–Ω–∞—î–º–æ –∑ –µ–∫—Ä–∞–Ω—É –ª–æ–≥—ñ–Ω—É
        primaryStage.show();
    }

    public static void loadLoginScene() throws IOException {
        loadScene("/com/example/olx/presentation/gui/view/LoginView.fxml", "–í—Ö—ñ–¥ / –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è", 600, 400);
    }

    public static void loadMainScene() throws IOException {
        loadScene("/com/example/olx/presentation/gui/view/MainView.fxml", "–ì–æ–ª–æ–≤–Ω–∞ - OLX", 1200, 800);
    }

    public static void loadCreateAdScene() throws IOException {
        loadScene("/com/example/olx/presentation/gui/view/CreateAdView.fxml", "–°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è - OLX", 700, 650);
    }

    private static void loadScene(String fxmlFile, String title, double width, double height) throws IOException {
        System.out.println("Attempting to load FXML: " + fxmlFile);
        URL fxmlLocation = MainGuiApp.class.getResource(fxmlFile);

        if (fxmlLocation == null) {
            throw new IOException("Cannot find FXML file at: " + fxmlFile +
                    ". Make sure FXML files are in the correct resources directory and the path starts with '/' and reflects the package structure.");
        }
        System.out.println("Found FXML at: " + fxmlLocation);

        FXMLLoader fxmlLoader = new FXMLLoader(fxmlLocation);
        Parent root = fxmlLoader.load();
        Scene scene = primaryStage.getScene();
        if (scene == null) {
            scene = new Scene(root, width, height);
            primaryStage.setScene(scene);
        } else {
            scene.setRoot(root);
            // –ú–æ–∂–Ω–∞ —Ç–∞–∫–æ–∂ –æ–Ω–æ–≤–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ä–∏ –≤—ñ–∫–Ω–∞, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            // primaryStage.setWidth(width);
            // primaryStage.setHeight(height);
        }
        primaryStage.setTitle(title);
    }

    // –ü–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ, —è–∫—â–æ —Ä–æ–∑–º—ñ—Ä–∏ –Ω–µ –≤–∫–∞–∑–∞–Ω—ñ
    private static void loadScene(String fxmlFile, String title) throws IOException {
        loadScene(fxmlFile, title, 800, 600); // –†–æ–∑–º—ñ—Ä–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    }


    @Override
    public void stop() throws Exception {
        System.out.println("Application stopping. Saving session state...");
        if (sessionManager != null) {
            sessionManager.saveState();
            System.out.println("Session state saved successfully.");
        }
        super.stop();
    }

    private static void initializeDefaultCategories() {
        if (categoryService == null) {
            System.err.println("CategoryService is not initialized. Cannot initialize default categories.");
            return;
        }
        try {
            List<CategoryComponent> existingCategories = categoryService.getAllRootCategories();
            if (existingCategories != null && !existingCategories.isEmpty()) {
                System.out.println("Categories already exist (" + existingCategories.size() + " root categories found), skipping initialization.");
                return;
            }

            System.out.println("Initializing default categories...");
            List<CategoryComponent> rootCategoriesToInitialize = new ArrayList<>();

            Category electronics = new Category("electronics", "–ï–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞", null);
            rootCategoriesToInitialize.add(electronics);

            Category clothing = new Category("clothing", "–û–¥—è–≥ —ñ –≤–∑—É—Ç—Ç—è", null);
            rootCategoriesToInitialize.add(clothing);

            Category home = new Category("home", "–î—ñ–º —ñ —Å–∞–¥", null);
            rootCategoriesToInitialize.add(home);

            Category auto = new Category("auto", "–ê–≤—Ç–æ", null);
            rootCategoriesToInitialize.add(auto);

            Category sport = new Category("sport", "–°–ø–æ—Ä—Ç —ñ —Ö–æ–±—ñ", null);
            rootCategoriesToInitialize.add(sport);

            // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É
            Category realEstate = new Category("real_estate", "–ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å", null);
            rootCategoriesToInitialize.add(realEstate);

            Category jobs = new Category("jobs", "–†–æ–±–æ—Ç–∞", null);
            rootCategoriesToInitialize.add(jobs);


            categoryService.initializeCategories(rootCategoriesToInitialize);
            System.out.println("Default categories initialization requested for " + rootCategoriesToInitialize.size() + " root categories.");

            List<CategoryComponent> checkCategories = categoryService.getAllRootCategories();
            System.out.println("Categories after initialization attempt: " +
                    (checkCategories != null ? checkCategories.size() + " root categories found." : "null (service error)"));
        } catch (Exception e) {
            System.err.println("Error initializing default categories: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public static AdCommandManager getAdCommandManager() {
        return adCommandManager;
    }

    public static CommandInvoker getCommandInvoker() {
        return commandInvoker;
    }

    public static void main(String[] args) {
        launch(args);
    }
}