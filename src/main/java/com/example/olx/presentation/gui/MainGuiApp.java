package com.example.olx.presentation.gui;

import com.example.olx.application.command.AdCommandManager;
import com.example.olx.application.command.CommandFactory;
import com.example.olx.application.command.CommandInvoker;
import com.example.olx.application.service.impl.AdServiceImpl;
import com.example.olx.application.service.impl.CategoryServiceImpl;
import com.example.olx.application.service.impl.UserServiceImpl;
import com.example.olx.application.service.port.AdServicePort;
import com.example.olx.application.service.port.CategoryServicePort;
import com.example.olx.application.service.port.NotificationServicePort;
import com.example.olx.application.service.port.UserService;
import com.example.olx.application.service.strategy.AdSearchStrategy;
import com.example.olx.application.service.strategy.DefaultAdSearchStrategy;
import com.example.olx.domain.model.Ad;
import com.example.olx.domain.model.AdState;
import com.example.olx.domain.model.Category;
import com.example.olx.domain.model.CategoryComponent;
import com.example.olx.domain.repository.AdRepository;
import com.example.olx.domain.repository.CategoryRepository;
import com.example.olx.domain.repository.UserRepository;
import com.example.olx.infrastructure.notification.ConsoleNotificationServiceImpl;
import com.example.olx.infrastructure.persistence.FileAdRepositoryImpl;
import com.example.olx.infrastructure.persistence.FileCategoryRepositoryImpl;
import com.example.olx.infrastructure.persistence.FileUserRepositoryImpl;
import com.example.olx.infrastructure.persistence.SessionManager;
import com.example.olx.infrastructure.security.DemoPasswordHasherImpl;
import com.example.olx.infrastructure.security.PasswordHasher;
import com.example.olx.presentation.gui.controller.AdDetailController;
import com.example.olx.presentation.gui.controller.CreateAdController;
import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;

import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

public class MainGuiApp extends Application {

    private static Stage primaryStage;

    // –°–µ—Ä–≤—ñ—Å–∏
    public static UserService userService;
    public static AdServicePort adService;
    public static CategoryServicePort categoryService;
    public static SessionManager sessionManager;

    // Command –ø–∞—Ç—Ç–µ—Ä–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
    public static AdCommandManager adCommandManager;
    public static CommandInvoker commandInvoker;
    public static CommandFactory commandFactory;

    // ===== –ü–û–ö–†–ê–©–ï–ù–Ü –ú–ï–¢–û–î–ò –î–õ–Ø –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø –û–ì–û–õ–û–®–ï–ù–¨ =====

    /**
     * –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
     * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø–∞—Ç—Ç–µ—Ä–Ω Builder –¥–ª—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
     */
    public static void loadAdDetailScene(Ad ad, AdDisplayConfig config) throws IOException {
        if (ad == null) {
            throw new IllegalArgumentException("Ad cannot be null");
        }

        ViewResult<AdDetailController> adDetailView = loadView(
                "/com/example/olx/presentation/gui/view/AdDetailView.fxml",
                AdDetailController.class
        );

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é
        adDetailView.controller.initializeWithConfig(ad, config);

        // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤—ñ–∫–Ω–∞
        String windowTitle = buildWindowTitle(ad, config);

        showScene(adDetailView.root, windowTitle, 800, 650);
    }

    /**
     * –°–ø—Ä–æ—â–µ–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
     */
    public static void loadAdDetailScene(Ad ad) throws IOException {
        loadAdDetailScene(ad, AdDisplayConfig.defaultConfig());
    }

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–µ–º—ñ—É–º –æ–≥–æ–ª–æ—à–µ–Ω—å
     */
    public static void loadPremiumAdDetailScene(Ad ad) throws IOException {
        AdDisplayConfig config = AdDisplayConfig.builder()
                .premium(true)
                .warranty(12, "–†–æ–∑—à–∏—Ä–µ–Ω–∞ –≥–∞—Ä–∞–Ω—Ç—ñ—è")
                .freeDelivery(true)
                .deliveryInfo("–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –µ–∫—Å–ø—Ä–µ—Å-–¥–æ—Å—Ç–∞–≤–∫–∞")
                .build();

        loadAdDetailScene(ad, config);
    }

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Ä–º—ñ–Ω–æ–≤–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å –∑—ñ –∑–Ω–∏–∂–∫–æ—é
     */
    public static void loadUrgentDiscountAdDetailScene(Ad ad, double discountPercent) throws IOException {
        AdDisplayConfig config = AdDisplayConfig.builder()
                .urgent(true)
                .discount(discountPercent, "–¢–µ—Ä–º—ñ–Ω–æ–≤–∞ —Ä–æ–∑–ø—Ä–æ–¥–∞–∂")
                .delivery(30.0, "–®–≤–∏–¥–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∞")
                .build();

        loadAdDetailScene(ad, config);
    }

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å—Ü–µ–Ω—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
     */
    public static void loadEditAdScene(Ad adToEdit) throws IOException {
        if (adToEdit == null) {
            throw new IllegalArgumentException("Ad to edit cannot be null");
        }

        ViewResult<CreateAdController> createAdView = loadView(
                "/com/example/olx/presentation/gui/view/CreateAdView.fxml",
                CreateAdController.class
        );

        createAdView.controller.initDataForEdit(adToEdit);

        String title = "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: " + adToEdit.getTitle();
        showScene(createAdView.root, title, 700, 600);
    }

    // ===== –î–û–ü–û–ú–Ü–ñ–ù–Ü –ú–ï–¢–û–î–ò =====

    /**
     * –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±—É–¥—å-—è–∫–æ–≥–æ –≤–∏–¥—É
     */
    private static <T> ViewResult<T> loadView(String fxmlPath, Class<T> controllerClass) throws IOException {
        try {
            URL fxmlLocation = MainGuiApp.class.getResource(fxmlPath);
            if (fxmlLocation == null) {
                throw new IOException("FXML file not found: " + fxmlPath +
                        ". Make sure FXML files are in the correct resources directory.");
            }

            System.out.println("Loading FXML from: " + fxmlLocation);

            FXMLLoader fxmlLoader = new FXMLLoader(fxmlLocation);
            Parent root = fxmlLoader.load();
            T controller = fxmlLoader.getController();

            if (controller == null) {
                throw new IOException("Controller is null for: " + fxmlPath +
                        ". Check fx:controller attribute in FXML file.");
            }

            return new ViewResult<>(root, controller);

        } catch (IOException e) {
            System.err.println("Error loading view: " + fxmlPath + " - " + e.getMessage());
            throw e;
        }
    }

    /**
     * –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑—É —Å—Ü–µ–Ω–∏
     */
    private static void showScene(Parent root, String title, double width, double height) {
        Scene scene = primaryStage.getScene();
        if (scene == null) {
            scene = new Scene(root, width, height);
            primaryStage.setScene(scene);
        } else {
            scene.setRoot(root);
        }
        primaryStage.setTitle(title);
    }

    /**
     * –ë—É–¥—É—î –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤—ñ–∫–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ç–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
     */
    private static String buildWindowTitle(Ad ad, AdDisplayConfig config) {
        StringBuilder title = new StringBuilder();

        // –î–æ–¥–∞—î–º–æ –ø—Ä–µ—Ñ—ñ–∫—Å–∏ –¥–ª—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Ç–∏–ø—ñ–≤
        if (config.isUrgent()) {
            title.append("üö® ");
        }
        if (config.isPremium()) {
            title.append("‚≠ê ");
        }

        title.append("–î–µ—Ç–∞–ª—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: ").append(ad.getTitle());

        return title.toString();
    }

    // ===== –û–°–ù–û–í–ù–Ü –ú–ï–¢–û–î–ò –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –°–¶–ï–ù =====

    public static void loadLoginScene() throws IOException {
        loadScene("/com/example/olx/presentation/gui/view/LoginView.fxml",
                "–í—Ö—ñ–¥ / –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è", 600, 400);
    }

    public static void loadMainScene() throws IOException {
        loadScene("/com/example/olx/presentation/gui/view/MainView.fxml",
                "–ì–æ–ª–æ–≤–Ω–∞ - OLX", 1200, 800);
    }

    public static void loadCreateAdScene() throws IOException {
        loadScene("/com/example/olx/presentation/gui/view/CreateAdView.fxml",
                "–°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è - OLX", 700, 650);
    }

    /**
     * –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–∏—Ö —Å—Ü–µ–Ω
     */
    private static void loadScene(String fxmlFile, String title, double width, double height) throws IOException {
        try {
            System.out.println("Attempting to load FXML: " + fxmlFile);
            URL fxmlLocation = MainGuiApp.class.getResource(fxmlFile);

            if (fxmlLocation == null) {
                throw new IOException("Cannot find FXML file at: " + fxmlFile +
                        ". Make sure FXML files are in the correct resources directory and the path starts with '/' and reflects the package structure.");
            }

            System.out.println("Found FXML at: " + fxmlLocation);

            FXMLLoader fxmlLoader = new FXMLLoader(fxmlLocation);
            Parent root = fxmlLoader.load();

            showScene(root, title, width, height);

        } catch (IOException e) {
            System.err.println("Error loading scene: " + fxmlFile + " - " + e.getMessage());
            throw e;
        }
    }

    // ===== –ú–ï–¢–û–î–ò –ñ–ò–¢–¢–Ñ–í–û–ì–û –¶–ò–ö–õ–£ –î–û–î–ê–¢–ö–£ =====

    @Override
    public void init() throws Exception {
        super.init();
        System.out.println("Initializing backend services...");

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ SessionManager
        sessionManager = SessionManager.getInstance();
        sessionManager.setStorageFilePath("olx_gui_data.dat");

        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Å—Ç–∞–Ω
        sessionManager.loadState();
        System.out.println("Session state loaded successfully.");

        PasswordHasher passwordHasher = new DemoPasswordHasherImpl();

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó
        UserRepository userRepository = new FileUserRepositoryImpl(sessionManager);
        CategoryRepository categoryRepository = new FileCategoryRepositoryImpl(sessionManager);
        AdRepository adRepository = new FileAdRepositoryImpl(sessionManager);

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ NotificationService
        NotificationServicePort notificationService = new ConsoleNotificationServiceImpl() {
            @Override
            public void notifyAdStateChanged(Ad ad, AdState newState) {
                System.out.println("Ad " + ad.getId() + " state changed to " + newState);
            }
        };

        AdSearchStrategy adSearchStrategy = new DefaultAdSearchStrategy();

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–µ—Ä–≤—ñ—Å–∏
        userService = new UserServiceImpl(userRepository, passwordHasher);
        categoryService = new CategoryServiceImpl(categoryRepository);
        adService = new AdServiceImpl(adRepository, userRepository, categoryRepository,
                notificationService, adSearchStrategy);

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Command –ø–∞—Ç—Ç–µ—Ä–Ω—É
        commandInvoker = new CommandInvoker();
        commandFactory = new CommandFactory(adService);
        adCommandManager = new AdCommandManager(commandInvoker, commandFactory);

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó (—è–∫—â–æ —ó—Ö —â–µ –Ω–µ–º–∞—î)
        initializeDefaultCategories();
        System.out.println("Backend services initialized successfully.");
    }

    @Override
    public void start(Stage stage) throws IOException {
        primaryStage = stage;
        primaryStage.setTitle("OLX-–¥–æ—à–∫–∞ –æ–≥–æ–ª–æ—à–µ–Ω—å");
        loadLoginScene();
        primaryStage.show();
    }

    @Override
    public void stop() throws Exception {
        System.out.println("Application stopping. Saving session state...");
        if (sessionManager != null) {
            sessionManager.saveState();
            System.out.println("Session state saved successfully.");
        }
        super.stop();
    }

    // ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –î–ê–ù–ò–• =====

    private static void initializeDefaultCategories() {
        if (categoryService == null) {
            System.err.println("CategoryService is not initialized. Cannot initialize default categories.");
            return;
        }

        try {
            List<CategoryComponent> existingCategories = categoryService.getAllRootCategories();
            if (existingCategories != null && !existingCategories.isEmpty()) {
                System.out.println("Categories already exist (" + existingCategories.size() +
                        " root categories found), skipping initialization.");
                return;
            }

            System.out.println("Initializing default categories...");
            List<CategoryComponent> rootCategoriesToInitialize = new ArrayList<>();

            // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–µ–Ω–µ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            Category electronics = new Category("electronics", "–ï–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞", null);
            rootCategoriesToInitialize.add(electronics);

            Category clothing = new Category("clothing", "–û–¥—è–≥ —ñ –≤–∑—É—Ç—Ç—è", null);
            rootCategoriesToInitialize.add(clothing);

            Category home = new Category("home", "–î—ñ–º —ñ —Å–∞–¥", null);
            rootCategoriesToInitialize.add(home);

            Category auto = new Category("auto", "–ê–≤—Ç–æ", null);
            rootCategoriesToInitialize.add(auto);

            Category sport = new Category("sport", "–°–ø–æ—Ä—Ç —ñ —Ö–æ–±—ñ", null);
            rootCategoriesToInitialize.add(sport);

            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            categoryService.initializeCategories(rootCategoriesToInitialize);
            System.out.println("Default categories initialization requested for " +
                    rootCategoriesToInitialize.size() + " root categories.");

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            List<CategoryComponent> checkCategories = categoryService.getAllRootCategories();
            System.out.println("Categories after initialization: " +
                    (checkCategories != null ? checkCategories.size() + " root categories found." :
                            "null (service error)"));

        } catch (Exception e) {
            System.err.println("Error initializing default categories: " + e.getMessage());
            e.printStackTrace();
        }
    }

    // ===== –ì–ï–¢–¢–ï–†–ò –î–õ–Ø –î–û–°–¢–£–ü–£ –î–û –ö–û–ú–ê–ù–î =====

    public static AdCommandManager getAdCommandManager() {
        return adCommandManager;
    }

    public static CommandInvoker getCommandInvoker() {
        return commandInvoker;
    }

    // ===== MAIN –ú–ï–¢–û–î =====

    public static void main(String[] args) {
        launch(args);
    }

    // ===== –î–û–ü–û–ú–Ü–ñ–ù–Ü –ö–õ–ê–°–ò =====

    /**
     * –î–æ–ø–æ–º—ñ–∂–Ω–∏–π –∫–ª–∞—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∏–¥—É
     */
    private static class ViewResult<T> {
        final Parent root;
        final T controller;

        ViewResult(Parent root, T controller) {
            this.root = root;
            this.controller = controller;
        }
    }
}

/**
 * –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø–∞—Ç—Ç–µ—Ä–Ω Builder –¥–ª—è –≥–Ω—É—á–∫–æ–≥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
 */
class AdDisplayConfig {
    private final boolean premium;
    private final boolean urgent;
    private final Double discountPercentage;
    private final String discountReason;
    private final Integer warrantyMonths;
    private final String warrantyType;
    private final Boolean freeDelivery;
    private final Double deliveryCost;
    private final String deliveryInfo;

    private AdDisplayConfig(Builder builder) {
        this.premium = builder.premium;
        this.urgent = builder.urgent;
        this.discountPercentage = builder.discountPercentage;
        this.discountReason = builder.discountReason;
        this.warrantyMonths = builder.warrantyMonths;
        this.warrantyType = builder.warrantyType;
        this.freeDelivery = builder.freeDelivery;
        this.deliveryCost = builder.deliveryCost;
        this.deliveryInfo = builder.deliveryInfo;
    }

    /**
     * –°—Ç–≤–æ—Ä—é—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
     */
    public static AdDisplayConfig defaultConfig() {
        return builder().build();
    }

    /**
     * –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π Builder
     */
    public static Builder builder() {
        return new Builder();
    }

    // –ì–µ—Ç—Ç–µ—Ä–∏
    public boolean isPremium() { return premium; }
    public boolean isUrgent() { return urgent; }
    public Double getDiscountPercentage() { return discountPercentage; }
    public String getDiscountReason() { return discountReason; }
    public Integer getWarrantyMonths() { return warrantyMonths; }
    public String getWarrantyType() { return warrantyType; }
    public Boolean getFreeDelivery() { return freeDelivery; }
    public Double getDeliveryCost() { return deliveryCost; }
    public String getDeliveryInfo() { return deliveryInfo; }

    /**
     * Builder –¥–ª—è AdDisplayConfig
     */
    public static class Builder {
        private boolean premium = false;
        private boolean urgent = false;
        private Double discountPercentage;
        private String discountReason;
        private Integer warrantyMonths;
        private String warrantyType;
        private Boolean freeDelivery;
        private Double deliveryCost;
        private String deliveryInfo;

        public Builder premium(boolean premium) {
            this.premium = premium;
            return this;
        }

        public Builder urgent(boolean urgent) {
            this.urgent = urgent;
            return this;
        }

        public Builder discount(double percentage, String reason) {
            this.discountPercentage = percentage;
            this.discountReason = reason;
            return this;
        }

        public Builder warranty(int months, String type) {
            this.warrantyMonths = months;
            this.warrantyType = type;
            return this;
        }

        public Builder freeDelivery(boolean free) {
            this.freeDelivery = free;
            if (free) {
                this.deliveryCost = 0.0;
            }
            return this;
        }

        public Builder delivery(double cost, String info) {
            this.deliveryCost = cost;
            this.deliveryInfo = info;
            this.freeDelivery = (cost == 0.0);
            return this;
        }

        public Builder deliveryInfo(String info) {
            this.deliveryInfo = info;
            return this;
        }

        public AdDisplayConfig build() {
            return new AdDisplayConfig(this);
        }
    }
}