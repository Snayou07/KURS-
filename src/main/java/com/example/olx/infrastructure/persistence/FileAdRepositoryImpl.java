// src/main/java/com/example/olx/infrastructure/persistence/FileAdRepositoryImpl.java
package com.example.olx.infrastructure.persistence;

import com.example.olx.domain.model.Ad;
import com.example.olx.domain.repository.AdRepository;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.concurrent.locks.ReentrantReadWriteLock;

public class FileAdRepositoryImpl implements AdRepository {
    private final SessionManager sessionManager;
    private final ReentrantReadWriteLock lock = new ReentrantReadWriteLock();

    public FileAdRepositoryImpl(SessionManager sessionManager) {
        this.sessionManager = sessionManager;
    }

    @Override
    public Ad save(Ad ad) {
        if (ad == null) {
            throw new IllegalArgumentException("–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ null");
        }

        lock.writeLock().lock();
        try {
            boolean isUpdate = sessionManager.getAdsFromState().stream()
                    .anyMatch(a -> a.getAdId().equals(ad.getAdId()));

            if (isUpdate) {
                sessionManager.updateAdInState(ad);
                System.out.println("‚úì –û–Ω–æ–≤–ª–µ–Ω–æ —ñ—Å–Ω—É—é—á–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: " + ad.getAdId() +
                        " (" + ad.getTitle() + ")");
            } else {
                sessionManager.addAdToState(ad);
                System.out.println("‚úì –î–æ–¥–∞–Ω–æ –Ω–æ–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: " + ad.getAdId() +
                        " (" + ad.getTitle() + ")");
            }

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ—ó –∑–º—ñ–Ω–∏ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
            try {
                sessionManager.saveState();
                System.out.println("‚úì –°—Ç–∞–Ω –ø—Ä–æ–≥—Ä–∞–º–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –ø—ñ—Å–ª—è –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è–º");
            } catch (Exception e) {
                System.err.println("‚ùå –ü–û–ú–ò–õ–ö–ê: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Å—Ç–∞–Ω –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è");
                System.err.println("   –ü—Ä–∏—á–∏–Ω–∞: " + e.getMessage());

                // –õ–æ–≥—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                if (e.getCause() != null) {
                    System.err.println("   –î–µ—Ç–∞–ª—ñ: " + e.getCause().getMessage());
                }

                // –°–ø—Ä–æ–±—É—î–º–æ –æ—á–∏—Å—Ç–∏—Ç–∏ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π —Ñ–∞–π–ª —ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π
                System.out.println("üîÑ –°–ø—Ä–æ–±–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è...");
                try {
                    sessionManager.clearCorruptedStateFile();
                    // –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
                    sessionManager.saveState();
                    System.out.println("‚úÖ –°—Ç–∞–Ω –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ");
                } catch (Exception retryException) {
                    System.err.println("‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ —Ç–∞–∫–æ–∂ –Ω–µ –≤–¥–∞–ª–∞—Å—è: " + retryException.getMessage());
                    // –ù–µ –∫–∏–¥–∞—î–º–æ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è, —â–æ–± –Ω–µ –±–ª–æ–∫—É–≤–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–∏
                    System.err.println("‚ö† –£–í–ê–ì–ê: –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ –≤ –ø–∞–º'—è—Ç—ñ, –∞–ª–µ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–∞ –¥–∏—Å–∫");
                }
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥—ñ–π—Å–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ
            Optional<Ad> savedAd = findById(ad.getAdId());
            if (savedAd.isPresent()) {
                System.out.println("‚úì –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ: –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó");
                return savedAd.get();
            } else {
                System.err.println("‚ùå –ü–û–ú–ò–õ–ö–ê: –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è!");
                return ad; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª
            }

        } finally {
            lock.writeLock().unlock();
        }
    }

    @Override
    public Optional<Ad> findById(String id) {
        if (id == null || id.trim().isEmpty()) {
            return Optional.empty();
        }

        lock.readLock().lock();
        try {
            Optional<Ad> result = sessionManager.getAdsFromState().stream()
                    .filter(ad -> ad.getAdId().equals(id.trim()))
                    .findFirst();

            if (result.isPresent()) {
                System.out.println("‚úì –ó–Ω–∞–π–¥–µ–Ω–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: " + id);
            } else {
                System.out.println("‚ö† –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: " + id);
            }

            return result;
        } finally {
            lock.readLock().unlock();
        }
    }

    @Override
    public List<Ad> findAll() {
        lock.readLock().lock();
        try {
            List<Ad> ads = sessionManager.getAdsFromState();
            System.out.println("üìã –ó–Ω–∞–π–¥–µ–Ω–æ –æ–≥–æ–ª–æ—à–µ–Ω—å –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó: " + ads.size());

            // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            if (!ads.isEmpty()) {
                long activeCount = ads.stream()
                        .filter(ad -> "–ê–∫—Ç–∏–≤–Ω–µ".equals(ad.getStatus()))
                        .count();
                System.out.println("   –ê–∫—Ç–∏–≤–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å: " + activeCount);

                // –í–∏–≤–æ–¥–∏–º–æ —Å–ø–∏—Å–æ–∫ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                System.out.println("   –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å:");
                for (int i = 0; i < ads.size(); i++) {
                    Ad ad = ads.get(i);
                    System.out.println("     " + (i+1) + ". ID: " + ad.getAdId() +
                            ", –ó–∞–≥–æ–ª–æ–≤–æ–∫: '" + ad.getTitle() +
                            "', –°—Ç–∞—Ç—É—Å: " + ad.getStatus());
                }
            }

            return ads;
        } finally {
            lock.readLock().unlock();
        }
    }

    @Override
    public List<Ad> findBySellerId(String sellerId) {
        if (sellerId == null || sellerId.trim().isEmpty()) {
            return List.of();
        }

        lock.readLock().lock();
        try {
            List<Ad> result = sessionManager.getAdsFromState().stream()
                    .filter(ad -> ad.getSellerId().equals(sellerId.trim()))
                    .collect(Collectors.toList());

            System.out.println("üîç –ó–Ω–∞–π–¥–µ–Ω–æ –æ–≥–æ–ª–æ—à–µ–Ω—å –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü—è " + sellerId + ": " + result.size());
            return result;
        } finally {
            lock.readLock().unlock();
        }
    }

    @Override
    public List<Ad> findByCategoryId(String categoryId) {
        if (categoryId == null || categoryId.trim().isEmpty()) {
            return List.of();
        }

        lock.readLock().lock();
        try {
            List<Ad> result = sessionManager.getAdsFromState().stream()
                    .filter(ad -> ad.getCategoryId().equals(categoryId.trim()))
                    .collect(Collectors.toList());

            System.out.println("üîç –ó–Ω–∞–π–¥–µ–Ω–æ –æ–≥–æ–ª–æ—à–µ–Ω—å –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó " + categoryId + ": " + result.size());
            return result;
        } finally {
            lock.readLock().unlock();
        }
    }

    @Override
    public void deleteById(String id) {
        if (id == null || id.trim().isEmpty()) {
            return;
        }

        lock.writeLock().lock();
        try {
            // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è
            Optional<Ad> existingAd = findById(id.trim());
            if (!existingAd.isPresent()) {
                System.out.println("‚ö† –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ ID " + id + " –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è");
                return;
            }

            // –í–∏–¥–∞–ª—è—î–º–æ –∑—ñ —Å—Ç–∞–Ω—É
            sessionManager.removeAdFromState(id.trim());

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
            try {
                sessionManager.saveState();
                System.out.println("‚úì –û–≥–æ–ª–æ—à–µ–Ω–Ω—è " + id + " –≤–∏–¥–∞–ª–µ–Ω–æ —Ç–∞ —Å—Ç–∞–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ");
            } catch (Exception e) {
                System.err.println("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: " + e.getMessage());

                // –°–ø—Ä–æ–±—É—î–º–æ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏
                try {
                    sessionManager.clearCorruptedStateFile();
                    sessionManager.saveState();
                    System.out.println("‚úÖ –°—Ç–∞–Ω –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è");
                } catch (Exception retryException) {
                    System.err.println("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω: " + retryException.getMessage());
                    System.err.println("‚ö† –£–í–ê–ì–ê: –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –ø–∞–º'—è—Ç—ñ, –∞–ª–µ –∑–º—ñ–Ω–∏ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–∞ –¥–∏—Å–∫");
                }
            }
        } finally {
            lock.writeLock().unlock();
        }
    }

    // –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    public void printRepositoryState() {
        lock.readLock().lock();
        try {
            System.out.println("=== –°–¢–ê–ù –†–ï–ü–û–ó–ò–¢–û–†–Ü–Æ –û–ì–û–õ–û–®–ï–ù–¨ ===");
            List<Ad> ads = sessionManager.getAdsFromState();
            System.out.println("–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: " + ads.size());

            if (!ads.isEmpty()) {
                System.out.println("–î–µ—Ç–∞–ª—ñ –æ–≥–æ–ª–æ—à–µ–Ω—å:");
                for (Ad ad : ads) {
                    System.out.println("- ID: " + ad.getAdId() +
                            ", –ó–∞–≥–æ–ª–æ–≤–æ–∫: '" + ad.getTitle() +
                            "', –°—Ç–∞—Ç—É—Å: " + ad.getStatus() +
                            ", –ü—Ä–æ–¥–∞–≤–µ—Ü—å: " + ad.getSellerId());
                }
            }
            System.out.println("================================");
        } finally {
            lock.readLock().unlock();
        }
    }
}